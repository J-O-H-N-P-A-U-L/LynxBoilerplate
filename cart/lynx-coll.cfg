SYMBOLS {
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
    __STARTOFDIRECTORY__: type = weak, value = $00CB; # start just after loader
    __BLOCKSIZE__: type = weak, value = 1024; # cart block size
    __BOOTLDR__:   type = import;
    __MEMEND__: type = weak, value = $9E58 - __STACKSIZE__;
    __gameSTART__: type = weak, value = $0200;
    __INTROSTART__: type = weak, value = $0200;
    __POPCORNSTART__: type = weak, value = $1000;
    __RAMSTART__: type = weak, value = $5000;
    __gameSIZE__: type = weak, value = __POPCORNSTART__ - __gameSTART__;
    __INTROSIZE__: type = weak, value = __POPCORNSTART__ - __INTROSTART__;
    __POPCORNSIZE__: type = weak, value = __RAMSTART__ - __POPCORNSTART__;
    __RAMSIZE__: type = weak, value = __MEMEND__ - __RAMSTART__;
}
MEMORY {
    ZP:     file = "", define = yes, start = $0000, size = $0100;
    HEADER: file = %O,               start = $0000, size = $0040;
    BOOT:   file = %O,               start = $0200, size = __STARTOFDIRECTORY__;
    DIR:    file = %O,               start = $0000, size = 4*8;
    RAM:    file = %O, define = yes, start = __RAMSTART__, size = __RAMSIZE__;
    game:   file = %O, define = yes, start = __gameSTART__, size = __gameSIZE__;
    POPCORN: file = %O, define = yes, start = __POPCORNSTART__, size = __POPCORNSIZE__;
    INTRO:   file = %O, define = yes, start = __INTROSTART__, size = __INTROSIZE__;
}
SEGMENTS {
    EXEHDR:   load = HEADER, type = ro;
    BOOTLDR:  load = BOOT,   type = ro;
    DIRECTORY:load = DIR,    type = ro;
    STARTUP:  load = RAM,    type = ro,  define = yes;
    LOWCODE:  load = RAM,    type = ro,                optional = yes;
    INIT:     load = RAM,    type = ro,  define = yes, optional = yes;
    CODE:     load = RAM,    type = ro,  define = yes;
    RODATA:   load = RAM,    type = ro,  define = yes;
    DATA:     load = RAM,    type = rw,  define = yes;
    BSS:      load = RAM,    type = bss, define = yes;
    ZEROPAGE: load = ZP,     type = zp;
    EXTZP:    load = ZP,     type = zp,                optional = yes;
    APPZP:    load = ZP,     type = zp,                optional = yes;
    game_CODE:     load = game,    type = ro,  define = yes;
    #game_RODATA:   load = game,    type = ro,  define = yes;
    game_DATA:     load = game,    type = rw,  define = yes;
    #game_BSS:      load = game,    type = bss, define = yes;
    POPCORN_CODE:     load = POPCORN,    type = ro,  optional = yes;
    POPCORN_RODATA:   load = POPCORN,    type = ro,  define = yes;
    POPCORN_DATA:   load = POPCORN,    type = rw,  optional = yes;
    INTRO_CODE:     load = INTRO,    type = ro,  define = yes;
    INTRO_RODATA:   load = INTRO,    type = ro,  define = yes;
    #INTRO_DATA:     load = INTRO,    type = rw,  define = yes;
    #INTRO_BSS:      load = INTRO,    type = bss, define = yes;
}
FEATURES {
    CONDES: segment = INIT,
	    type    = constructor,
	    label   = __CONSTRUCTOR_TABLE__,
	    count   = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type    = destructor,
	    label   = __DESTRUCTOR_TABLE__,
	    count   = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type    = interruptor,
	    label   = __INTERRUPTOR_TABLE__,
	    count   = __INTERRUPTOR_COUNT__,
            import  = __CALLIRQ__;
}
